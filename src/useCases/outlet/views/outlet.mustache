<html>

<head>
    <title>Outlet Control</title>
    <style>
        body {
            background: black;
            color: white;
            font-size: 24px;
        }

        .buttons {
            display: flex;
        }

        button {
            background: #666;
            border: 2px solid black;
            cursor: pointer;
            flex: 1 1 auto;
            font-size: 48px;
            font-weight: bold;
            margin: 20px;
            outline: none;
            padding: 40px;
        }

        button.on {
            background-color: #11a;
            color: #ddd;
        }

        ol {
            list-style: none;
            margin: 0;
            padding: 0;
        }

        li {
            padding-bottom: 4px;
        }
    </style>
</head>

<body>
<div class="buttons">
    <button type="button" class="left">Pump</button>
    <button type="button" class="right">Light</button>
</div>
<button type="button" class="runLeftFor5">Pump for 5 Minutes</button>
<button type="button" class="runLeftFor30">Pump for 30 Minutes</button>
<div class="schedule">
    <header>Schedule</header>
    <ol class="jobList"></ol>
</div>
<script>
    const apiHost = 'http://' + location.host;

    const leftButton = document.querySelector('.left');
    const rightButton = document.querySelector('.right');

    const outletStates = {
        left: false,
        right: false
    };

    function get(path) {
        return fetch(apiHost + path, {
            headers: {
                'Accept': 'application/json'
            }
        })
                .then(res => res.json())
    }


    function setupButtons() {
        leftButton.addEventListener('click', makeToggleFunction('left'));

        rightButton.addEventListener('click', makeToggleFunction('right'));

        const runLeftFor5Button = document.querySelector('.runLeftFor5');
        runLeftFor5Button.addEventListener('click', scheduleRunLeftFor5)

        const runLeftFor30Button = document.querySelector('.runLeftFor30');
        runLeftFor30Button.addEventListener('click', scheduleRunLeftFor30)
    }

    function refreshOutletStates() {
        get('/outlets')
                .then(outlets => {
                    outletStates.left = outlets['left'];
                    outletStates.right = outlets['right'];

                    if (outlets['left']) {
                        leftButton.classList.add('on');
                    } else {
                        leftButton.classList.remove('on');
                    }

                    if (outlets['right']) {
                        rightButton.classList.add('on');
                    } else {
                        rightButton.classList.remove('on');
                    }
                    console.log('outlets updated');
                })
    }

    function refreshSchedule() {
        get('/schedule')
                .then(list => {
                    const jobList = document.querySelector('.jobList');

                    //clear old list
                    while (jobList.firstChild) {
                        jobList.removeChild(jobList.firstChild);
                    }

                    list.forEach(job => {
                        const li = document.createElement('li');
                        li.innerText = `${formatDate(job.time)}: ${job.action.path}`;
                        jobList.appendChild(li);
                    })
                    console.log('schedule updated');
                })
    }

    function refreshAll() {
      refreshOutletStates();
      refreshSchedule();
    }

    function scheduleRunLeftFor5(e) {
        return fetch(apiHost + '/leftOutletOn', {method: 'put'})
                .then(refreshOutletStates)
                .then(function () {
                    return fetch(apiHost + '/schedule?minutes=5&action=rightOutletOff', {method: 'put'})
                })
                .then(refreshSchedule)
    }

    function scheduleRunLeftFor30(e) {
        return fetch(apiHost + '/leftOutletOn', {method: 'put'})
                .then(refreshOutletStates)
                .then(function () {
                    return fetch(apiHost + '/schedule?minutes=30&action=leftOutletOff', {method: 'put',})
                })
                .then(refreshSchedule)
    }


    function makeToggleFunction(id) {
        return e => {
            const newState = outletStates[id] ? 'Off' : 'On';
            const path = `/${id}Outlet${newState}`;
            return fetch(apiHost + path, {
                method: 'put'
            })
                    .then(res => res.json())
                    .then(success => {
                        if (success) {
                            outletStates[id] = !outletStates[id];
                            e.target.classList.toggle('on');
                        } else {
                            console.error(`Error setting ${path}`);
                        }
                    })
        }
    }

    function formatDate(timestamp) {
        const date = new Date(timestamp);
        const hours24 = date.getHours();
        const ampm = hours24 >= 12 ? 'pm' : 'am';
        const hours = hours24 > 12 ? hours24 - 12 : hours24;
        const minutes = date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes();
        return `${hours}:${minutes}${ampm}`
    }

    setupButtons();

    refreshAll();

    setInterval(refreshAll, 5000);
</script>
</body>

</html>
